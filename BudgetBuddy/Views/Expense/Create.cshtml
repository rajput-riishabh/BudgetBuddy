@model BudgetBuddy.Models.ViewModels.ExpenseViewModel
@{
    ViewData["Title"] = "Add Expense";
}

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card bg-white shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="card-title mb-0">Add New Expense</h2>
                        <a asp-action="Index" class="btn btn-outline-secondary">
                            <i class="bi bi-arrow-left"></i> Back to List
                        </a>
                    </div>

                    <form asp-action="Create" method="post">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        <div class="row">
                            <!-- Amount Field -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Amount" class="form-label required">Amount</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input asp-for="Amount" class="form-control" type="number" step="0.01" min="0.01" required />
                                </div>
                                <span asp-validation-for="Amount" class="text-danger"></span>
                            </div>

                            <!-- Date Field -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Date" class="form-label required">Date</label>
                                <input asp-for="Date" class="form-control" type="date"
                                       value="@DateTime.UtcNow.ToString("yyyy-MM-dd")" required />
                                <span asp-validation-for="Date" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Category Field -->
                        <div class="mb-3">
                            <label asp-for="CategoryId" class="form-label required">Category</label>
                            <select asp-for="CategoryId" class="form-select" required>
                                <option value="">Select a category</option>
                                @foreach (var category in Model.Categories)
                                {
                                    <option value="@category.CategoryId">@category.Name</option>
                                }
                            </select>
                            <span asp-validation-for="CategoryId" class="text-danger"></span>
                        </div>

                        <!-- Description Field -->
                        <div class="mb-4">
                            <label asp-for="Description" class="form-label required">Description</label>
                            <textarea asp-for="Description" class="form-control" rows="3"
                                      maxlength="200" required></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                            <div class="form-text">
                                <span id="descriptionCharCount">0</span>/200 characters
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-plus-circle"></i> Add Expense
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .required:after {
            content: " *";
            color: red;
        }
    </style>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function() {
            // Initialize the character counter
            const descriptionTextarea = document.querySelector('#Description');
            const charCount = document.querySelector('#descriptionCharCount');

            function updateCharCount() {
                const currentLength = descriptionTextarea.value.length;
                charCount.textContent = currentLength;

                if (currentLength >= 190) {
                    charCount.classList.add('text-danger');
                } else {
                    charCount.classList.remove('text-danger');
                }
            }

            // Update on input
            descriptionTextarea.addEventListener('input', updateCharCount);

            // Initial count
            updateCharCount();

            // Initialize date picker with current date
            const today = new Date();
            const formattedDate = today.toISOString().split('T')[0];
            $('#Date').val(formattedDate);

            // Custom validation for amount
            $('form').on('submit', function(e) {
                const amount = parseFloat($('#Amount').val());
                if (amount <= 0) {
                    e.preventDefault();
                    Swal.fire({
                        title: 'Invalid Amount',
                        text: 'Amount must be greater than 0',
                        icon: 'error',
                        confirmButtonColor: '#3085d6'
                    });
                }
            });

            // Category select styling and validation
            $('.form-select').on('change', function() {
                if ($(this).val()) {
                    $(this).removeClass('is-invalid');
                }
            });
        });
    </script>
}