@model BudgetBuddy.Models.ViewModels.ReportViewModels.CategoryReportViewModel
@{
    ViewData["Title"] = $"{Model.CategoryName} - Category Report";
    var currentUser = "rajput-riishabh";
    var currentDate = DateTime.Parse("2025-03-11 12:32:30");
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">
                @Model.CategoryName
                @if (Model.IsPredefined)
                {
                    <span class="badge bg-info">System Category</span>
                }
            </h2>
            <p class="text-muted mb-0">
                <i class="bi bi-calendar-range"></i>
                @Model.StartDate.ToString("MMM d, yyyy") - @Model.EndDate.ToString("MMM d, yyyy")
            </p>
        </div>
        <div class="btn-group">
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back to Overview
            </a>
            <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#dateRangeModal">
                <i class="bi bi-calendar"></i> Change Date Range
            </button>
            <button type="button" class="btn btn-outline-success" onclick="exportToCsv()">
                <i class="bi bi-download"></i> Export Data
            </button>
        </div>
    </div>

    <!-- Summary Cards Row -->
    <div class="row mb-4">
        <!-- Total Expenses Card -->
        <div class="col-md-3">
            <div class="card bg-white shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-subtitle mb-2 text-muted">Total Expenses</h6>
                            <h2 class="card-text text-danger mb-0">@Model.TotalExpenses.ToString("C")</h2>
                        </div>
                        <div class="rounded-circle bg-danger bg-opacity-10 p-3">
                            <i class="bi bi-cash text-danger fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Budget Status Card -->
        <div class="col-md-3">
            <div class="card bg-white shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-subtitle mb-2 text-muted">Budget Status</h6>
                            <h2 class="card-text @(Model.RemainingBudget < 0 ? "text-danger" : "text-success") mb-0">
                                @Model.RemainingBudget.ToString("C")
                            </h2>
                        </div>
                        <div class="rounded-circle bg-@(Model.RemainingBudget < 0 ? "danger" : "success") bg-opacity-10 p-3">
                            <i class="bi bi-wallet2 text-@(Model.RemainingBudget < 0 ? "danger" : "success") fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Transaction Count Card -->
        <div class="col-md-3">
            <div class="card bg-white shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-subtitle mb-2 text-muted">Transactions</h6>
                            <h2 class="card-text text-primary mb-0">@Model.ExpenseCount</h2>
                        </div>
                        <div class="rounded-circle bg-primary bg-opacity-10 p-3">
                            <i class="bi bi-receipt text-primary fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Average Per Transaction Card -->
        <div class="col-md-3">
            <div class="card bg-white shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-subtitle mb-2 text-muted">Average Per Transaction</h6>
                            <h2 class="card-text text-info mb-0">
                                @((Model.ExpenseCount > 0 ? Model.TotalExpenses / Model.ExpenseCount : 0).ToString("C"))
                            </h2>
                        </div>
                        <div class="rounded-circle bg-info bg-opacity-10 p-3">
                            <i class="bi bi-calculator text-info fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <!-- Budget Progress -->
        <div class="col-md-6">
            <div class="card bg-white shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Budget Progress</h5>
                    <div class="d-flex justify-content-between mb-2">
                        <span>@Model.TotalExpenses.ToString("C") spent</span>
                        <span>Budget: @Model.BudgetAmount.ToString("C")</span>
                    </div>
                    @{
                        var progressClass = Model.BudgetUsagePercentage switch
                        {
                            >= 100 => "danger",
                            >= 75 => "warning",
                            _ => "success"
                        };
                    }
                    <div class="progress" style="height: 25px;">
                        <div class="progress-bar bg-@progressClass"
                             role="progressbar"
                             style="width: @Math.Min(Model.BudgetUsagePercentage, 100)%">
                            @Model.BudgetUsagePercentage.ToString("F0")%
                        </div>
                    </div>
                    @if (Model.BudgetUsagePercentage >= 90)
                    {
                        <div class="alert alert-warning mt-3 mb-0">
                            <i class="bi bi-exclamation-triangle"></i>
                            You're approaching or have exceeded your budget for this category!
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Daily Distribution Chart -->
        <div class="col-md-6">
            <div class="card bg-white shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Daily Distribution</h5>
                    <canvas id="dailyDistributionChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Transactions Table -->
    <div class="card bg-white shadow-sm">
        <div class="card-body">
            <h5 class="card-title">Transaction History</h5>
            <div class="table-responsive">
                <table class="table" id="transactionsTable">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Description</th>
                            <th>Amount</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var expense in Model.Expenses.OrderByDescending(e => e.Date))
                        {
                            <tr>
                                <td>@expense.Date.ToString("MMM d, yyyy")</td>
                                <td>@expense.Description</td>
                                <td>@expense.Amount.ToString("C")</td>
                                <td>
                                    <a asp-controller="Expense"
                                       asp-action="Edit"
                                       asp-route-id="@expense.ExpenseId"
                                       class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Date Range Modal -->
<div class="modal fade" id="dateRangeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select Date Range</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="dateRangeForm" asp-action="CategoryDetails" method="get">
                    <input type="hidden" name="id" value="@Model.CategoryId" />
                    <div class="mb-3">
                        <label class="form-label">Start Date</label>
                        <input type="date" name="startDate" class="form-control"
                               value="@Model.StartDate.ToString("yyyy-MM-dd")" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">End Date</label>
                        <input type="date" name="endDate" class="form-control"
                               value="@Model.EndDate.ToString("yyyy-MM-dd")" required />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="dateRangeForm" class="btn btn-primary">Apply</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // Daily Distribution Chart
        const dailyData = @Json.Serialize(
        Model.Expenses
            .GroupBy(e => e.Date.Date)
            .Select(g => new { Date = g.Key.ToString("MMM d"), Amount = g.Sum(e => e.Amount) })
            .OrderBy(x => DateTime.Parse(x.Date))
    );

        const ctx = document.getElementById('dailyDistributionChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: dailyData.map(d => d.Date),
                datasets: [{
                    label: 'Daily Expenses',
                    data: dailyData.map(d => d.Amount),
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgb(75, 192, 192)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return '$' + context.raw.toFixed(2);
                            }
                        }
                    }
                }
            }
        });

        // Date range validation
        document.getElementById('dateRangeForm').addEventListener('submit', function(e) {
            const startDate = new Date(this.startDate.value);
            const endDate = new Date(this.endDate.value);

            if (startDate > endDate) {
                e.preventDefault();
                Swal.fire({
                    title: 'Invalid Date Range',
                    text: 'End date must be after start date',
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
            }
        });

        // Export to CSV function
        function exportToCsv() {
            const rows = [
                ['Date', 'Description', 'Amount'],
                ...Array.from(document.querySelectorAll('#transactionsTable tbody tr')).map(row => {
                    const cells = row.querySelectorAll('td');
                    return [
                        cells[0].textContent,
                        cells[1].textContent,
                        cells[2].textContent.replace(/[^0-9.-]+/g, '')
                    ];
                })
            ];

            const csvContent = rows.map(row => row.join(',')).join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.setAttribute('hidden', '');
            a.setAttribute('href', url);
            a.setAttribute('download', `${Model.CategoryName}_expenses.csv`);
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }
    </script>
}